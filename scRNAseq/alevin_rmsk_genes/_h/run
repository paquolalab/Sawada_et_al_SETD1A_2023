#!/bin/bash
"exec" "snakemake" "--keep-going" "--printshellcmds" "--jobs" "2" "--snakefile" "$0"

import pandas as pd

def get_sample_data():
    df = pd.read_csv('/ceph/projects/organoid_sc_rnaseq/input/metadata/tables/with_fastq/_m/10X_assays.csv')
    for x in df.itertuples(index=False, name=None):
        d = dict(zip(df.columns, x))
        yield (d['10X_Assay_ID'], d)

        
sample_dict = dict(get_sample_data())


rule all:
    input:
       expand('{sample}/{run_type}', sample=sample_dict.keys(), run_type=['hto', 'rna'])


rule alevin_rna:
    output:
        directory('{sample}/rna')
    
    params:
        r1 = lambda w: sample_dict[w.sample]['RNA_R1_fastq'],
        r2 = lambda w: sample_dict[w.sample]['RNA_R2_fastq'],
    log:
        stdout = '{sample}.rna.stdout',
        stderr = '{sample}.rna.stderr',
    shell:
        """
        salmon alevin \
        -l ISR \
        -1 {params.r1} \
        -2 {params.r2} \
        --chromiumV3 \
        -i /ceph/genome/human/gencode35/GRCh38.p13.PRI/transcriptome/salmon_index_with_rmsk/_m/salmon_index \
        -p 10 \
        -o {output} \
        --tgMap /ceph/genome/human/gencode35/GRCh38.p13.PRI/transcriptome/salmon_index_with_rmsk/transcript_to_gene/_m/transcript_to_gene.tsv \
        --dumpMtx \
        --dumpFeatures \
        --dumpUmiGraph \
        --expectCells 15000 \
        > {log.stdout} \
        2> {log.stderr} \
       """  


rule alevin_hto:
    output:
       directory('{sample}/hto')
    params:
        r1 = lambda w: sample_dict[w.sample]['HTO_R1_fastq'],
        r2 = lambda w: sample_dict[w.sample]['HTO_R2_fastq'],
        hto_index = '../../hto_index/_m/{sample}',
    log:
        stdout = '{sample}.hto.stdout',
        stderr = '{sample}.hto.stderr',
    shell:
        """
        salmon alevin \
        -l ISR \
        -i {params.hto_index} \
        -1 {params.r1} \
        -2 {params.r2} \
        -o {output} \
        -p 10 \
        --citeseq \
        --end 5 \
        --umiLength 12 \
        --barcodeLength 16 \
        --featureStart 0 \
        --featureLength 15 \
        --naiveEqclass \
        > {log.stdout} \
        2> {log.stderr} \
        """
